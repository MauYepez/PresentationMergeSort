(function() {
  var Act, Color, autorun, autorun_dur, autorun_loop, biggest_bbox, buttons_edit_playing, buttons_edit_rewinding, buttons_edit_stopped, do_step, dur_index, durations, init_draw_array, init_pointers, main, max, merge, state, undo_step;

  state = {
    left: [1, 8, 9, 15, 89],
    right: [5, 5, 20, 44, 99]
  };

  state.A = state.left.concat(state.right);

  Act = {
    none: 0,
    move_l: 1,
    inc_l: 2,
    move_r: 3,
    inc_r: 4,
    inc_t: 5
  };

  merge = function*(A, l, c, r) {
    var p1, p2, t;
    [t, p1, p2] = [
      l,
      l,
      c // O(1) initialize pointers
    ];
    // merge while both sides not empty
    while (p1 < c && p2 < r) { // O(k) fill temp storage
      yield ({
        act: Act.none,
        msg: `Comparing A[l] > A[r]: is ${A[p1]} > ${A[p2]} ?`
      });
      if (A[p1] <= A[p2]) {
        yield ({
          act: Act.move_l,
          t: t,
          l: p1,
          r: p2,
          msg: `No: ${A[p1]} ${A[p1] === A[p2] ? '==' : '<'} ${A[p2]} thus output A[l] == ${A[p1]} from left`
        });
        p1 += 1; // O(1) increment left pointer
        yield ({
          act: Act.inc_l,
          t: t,
          l: p1,
          r: p2,
          msg: "Increment l"
        });
      } else {
        yield ({
          act: Act.move_r,
          t: t,
          l: p1,
          r: p2,
          msg: `Yes: ${A[p1]} > ${A[p2]} thus output A[r] == ${A[p2]} from right`
        });
        p2 += 1; // O(1) increment right pointer
        yield ({
          act: Act.inc_r,
          t: t,
          l: p1,
          r: p2,
          msg: "Increment r"
        });
      }
      t += 1; // O(1) increment temp pointer
      yield ({
        act: Act.inc_t,
        t: t,
        l: p1,
        r: p2,
        msg: "Increment m"
      });
    }
    // copy remaining left side
    while (p1 < c) { // O(k) fill temp storage
      yield ({
        act: Act.move_l,
        t: t,
        l: p1,
        r: p2,
        msg: `Output remaining A[l] == ${A[p1]}`
      });
      p1 += 1; // O(1) increment left pointer
      yield ({
        act: Act.inc_l,
        t: t,
        l: p1,
        r: p2,
        msg: "Increment l"
      });
      t += 1; // O(1) increment temp pointer
      yield ({
        act: Act.inc_t,
        t: t,
        l: p1,
        r: p2,
        msg: "Increment m"
      });
    }
    // copy remaining right side
    while (p2 < r) { // O(k) fill temp storage
      yield ({
        act: Act.move_r,
        t: t,
        l: p1,
        r: p2,
        msg: `Output remaining A[r] == ${A[p2]}`
      });
      p2 += 1; // O(1) increment right pointer
      yield ({
        act: Act.inc_r,
        t: t,
        l: p1,
        r: p2,
        msg: "Increment r"
      });
      t += 1; // O(1) increment temp pointer
      yield ({
        act: Act.inc_t,
        t: t,
        l: p1,
        r: p2,
        msg: "Increment m"
      });
    }
    return (yield {
      act: Act.none,
      msg: "Done!"
    });
  };

  // find maximum width and height of all cells
  biggest_bbox = function(A) {
    var bbox, j, len, v, vbox;
    bbox = {
      width: 0,
      height: 0
    };
    for (j = 0, len = A.length; j < len; j++) {
      v = A[j];
      vbox = v.bbox();
      bbox.width = Math.max(bbox.width, vbox.width);
      bbox.height = Math.max(bbox.height, vbox.height);
    }
    return bbox;
  };

  max = function(A) {
    return A.reduce(function(a, b) {
      return Math.max(a, b);
    });
  };

  Color = net.brehaut.Color;

  init_draw_array = function(draw, A) {
    var Amax, bbox, bot_x, bot_y, c, i, in_rect, in_rects, j, len, margin, num_group, number, numbers, out_rect, out_rects, ptrs, rect_group, red, spacing, top_x, top_y, v, view_height;
    c = Math.floor(A.length / 2);
    Amax = max(A);
    rect_group = draw.group();
    num_group = draw.group();
    // create text elements for numbers
    numbers = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = A.length; j < len; j++) {
        v = A[j];
        results.push(num_group.text("" + v));
      }
      return results;
    })();
    // determine how big each cell of A should be
    bbox = biggest_bbox(numbers);
    margin = 16;
    bbox.width += margin;
    bbox.height += margin;
    // set the viewbox to be just the matrix
    spacing = 3;
    view_height = (3 + spacing) * bbox.height;
    draw.viewbox({
      x: -4,
      y: -4,
      width: 8 + bbox.width * (1 + A.length),
      height: 8 + view_height
    });
    draw.size(12 + bbox.width * A.length, 12 + view_height);
    // create rectangles for each cell
    in_rects = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = A.length; j < len; j++) {
        v = A[j];
        results.push(rect_group.rect(bbox.width, bbox.height));
      }
      return results;
    })();
    out_rects = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = A.length; j < len; j++) {
        v = A[j];
        results.push(rect_group.rect(bbox.width, bbox.height));
      }
      return results;
    })();
    // position rects and numbers
    top_y = bbox.height;
    bot_y = view_height - 2 * bbox.height;
    red = Color({
      red: 25,
      green: 0.8,
      blue: 0.8
    });
    for (i = j = 0, len = numbers.length; j < len; i = ++j) {
      number = numbers[i];
      in_rect = in_rects[i];
      out_rect = out_rects[i];
      top_x = bbox.width * i;
      bot_x = bbox.width * (i - c);
      number.my_color = red.toCSS(); //change color of the array
      in_rect.fill(number.my_color).stroke('#fff').move(top_x, top_y);
      out_rect.base_color = in_rect.base_color = '#ddd';
      out_rect.fill(out_rect.base_color).stroke('#fff').move(top_x, bot_y);
      // put number centered inside rectangle
      number.center(in_rect.cx(), in_rect.cy());
    }
    // create pointers
    ptrs = init_pointers(draw, bbox, c, top_y, bot_y);
    return {
      bbox: bbox,
      numbers: numbers,
      in_rects: in_rects,
      out_rects: out_rects,
      ptrs: ptrs
    };
  };

  init_pointers = function(draw, bbox, c, top_y, bot_y) {
    var left, lrect, ltext, orect, otext, out, right, rrect, rtext;
    left = draw.group();
    right = draw.group();
    out = draw.group();
    lrect = left.rect(bbox.width, bbox.height).fill({
      opacity: 0
    }).stroke('#000').move(0, top_y);
    ltext = left.text("l").font({
      family: "Monospace",
      size: 32
    }).center(lrect.cx(), lrect.cy() - bbox.height);
    rrect = right.rect(bbox.width, bbox.height).fill({
      opacity: 0
    }).stroke('#000').move(bbox.width * c, top_y);
    rtext = right.text("r").font({
      family: "Monospace",
      size: 32
    }).center(rrect.cx(), rrect.cy() - bbox.height);
    orect = out.rect(bbox.width, bbox.height).fill({
      opacity: 0
    }).stroke('#000').move(0, bot_y);
    otext = out.text("m").font({
      family: "Monospace",
      size: 32
    });
    otext.center(orect.cx(), orect.cy() + bbox.height);
    return {
      left: left,
      right: right,
      out: out
    };
  };

  dur_index = 0;

  durations = [
    {
      move: 500,
      inc: 300
    },
    {
      move: 200,
      inc: 50
    },
    {
      move: 50,
      inc: 10
    }
  ];

  window.toggle_turbo = function() {
    return dur_index = (dur_index + 1) % durations.length;
  };

  do_step = function(draw, info, step) {
    var dest, num, src;
    switch (step.act) {
      case Act.none:
        true;
        break;
      case Act.move_l:
        // move number[l] at in_rects[l] to out_rects[t]
        num = info.numbers[step.l];
        dest = info.out_rects[step.t];
        num.animate({
          duration: durations[dur_index].move
        }).center(dest.cx(), dest.cy());
        dest.animate({
          duration: durations[dur_index].move
        }).fill(num.my_color);
        src = info.in_rects[step.l];
        src.animate({
          duration: durations[dur_index].move
        }).fill(src.base_color);
        break;
      case Act.inc_l:
        // move l marker to the right
        info.ptrs.left.animate({
          duration: durations[dur_index].inc
        }).dx(info.bbox.width);
        break;
      case Act.move_r:
        // move number[r] at in_rects[r] to out_rects[t]
        num = info.numbers[step.r];
        dest = info.out_rects[step.t];
        num.animate({
          duration: durations[dur_index].move
        }).center(dest.cx(), dest.cy());
        dest.animate({
          duration: durations[dur_index].move
        }).fill(num.my_color);
        src = info.in_rects[step.r];
        src.animate({
          duration: durations[dur_index].move
        }).fill(src.base_color);
        break;
      case Act.inc_r:
        // move r marker to the right
        info.ptrs.right.animate({
          duration: durations[dur_index].inc
        }).dx(info.bbox.width);
        break;
      case Act.inc_t:
        // move t marker to the right
        info.ptrs.out.animate({
          duration: durations[dur_index].inc
        }).dx(info.bbox.width);
    }
    return true;
  };

  undo_step = function(draw, info, step) {
    var dest, num, src;
    switch (step.act) {
      case Act.none:
        true;
        break;
      case Act.move_l:
        // move number[l] at out_rects[t] back to in_rects[l]
        num = info.numbers[step.l];
        dest = info.in_rects[step.l];
        dest.animate({
          duration: durations[dur_index].move
        }).fill(num.my_color);
        num.animate({
          duration: durations[dur_index].move
        }).center(dest.cx(), dest.cy());
        src = info.out_rects[step.t];
        src.animate({
          duration: durations[dur_index].move
        }).fill(src.base_color);
        break;
      case Act.inc_l:
        // move l marker to the left
        info.ptrs.left.animate({
          duration: durations[dur_index].inc
        }).dx(-info.bbox.width);
        break;
      case Act.move_r:
        // move number[r] at out_rects[t] back to in_rects[r]
        num = info.numbers[step.r];
        dest = info.in_rects[step.r];
        dest.animate({
          duration: durations[dur_index].move
        }).fill(num.my_color);
        num.animate({
          duration: durations[dur_index].move
        }).center(dest.cx(), dest.cy());
        src = info.out_rects[step.t];
        src.animate({
          duration: durations[dur_index].move
        }).fill(src.base_color);
        break;
      case Act.inc_r:
        // move r marker to the left
        info.ptrs.right.animate({
          duration: durations[dur_index].inc
        }).dx(-info.bbox.width);
        break;
      case Act.inc_t:
        // move t marker to the left
        info.ptrs.out.animate({
          duration: durations[dur_index].inc
        }).dx(-info.bbox.width);
    }
    return true;
  };

  // autorun controls
  autorun = 0;

  autorun_dur = function() {
    return Math.max(durations[dur_index].move, durations[dur_index].inc);
  };

  buttons_edit_playing = function() {
    document.getElementById("play_button").innerHTML = "Pause";
    return document.getElementById("rewind_button").innerHTML = "Rewind";
  };

  buttons_edit_rewinding = function() {
    document.getElementById("play_button").innerHTML = "Play";
    return document.getElementById("rewind_button").innerHTML = "Pause";
  };

  buttons_edit_stopped = function() {
    document.getElementById("play_button").innerHTML = "Play";
    return document.getElementById("rewind_button").innerHTML = "Rewind";
  };

  // start/stop play
  window.click_play = function() {
    switch (autorun) {
      case 0: // paused
        autorun = 1;
        buttons_edit_playing();
        return autorun_loop();
      case 1: // already playing
        return autorun = 0;
      case -1: // rewinding
        autorun = 1;
        return buttons_edit_playing();
    }
  };

  // start/stop rewind
  window.click_rewind = function() {
    switch (autorun) {
      case 0: // paused
        autorun = -1;
        buttons_edit_rewinding();
        return autorun_loop();
      case 1: // playing
        autorun = -1;
        return buttons_edit_rewinding();
      case -1: // already rewinding
        return autorun = 0;
    }
  };

  // loop
  autorun_loop = function() {
    var dur;
    dur = autorun_dur();
    if (autorun === 1 && window.click_next()) {
      state.draw.animate({
        duration: dur
      }).after(function() {
        return autorun_loop();
      });
    } else if (autorun === -1 && window.click_prev()) {
      state.draw.animate({
        duration: dur
      }).after(function() {
        return autorun_loop();
      });
    } else {
      autorun = 0;
      buttons_edit_stopped();
    }
    return true;
  };

  window.click_next = function() {
    if (state.t + 1 < state.steps.length) {
      state.t++;
      do_step(state.draw, state.info, state.steps[state.t]);
      document.getElementById("msg").innerHTML = state.steps[state.t].msg;
      return true;
    } else {
      return false;
    }
  };

  window.click_prev = function() {
    if (state.t > 0) {
      undo_step(state.draw, state.info, state.steps[state.t]);
      state.t--;
      document.getElementById("msg").innerHTML = state.steps[state.t].msg;
      return true;
    } else {
      return false;
    }
  };

  main = function() {
    var s;
    state.draw = SVG('drawing');
    state.info = init_draw_array(state.draw, state.A);
    state.steps = (function() {
      var ref, results;
      ref = merge(state.A, 0, Math.floor(state.A.length / 2), state.A.length);
      results = [];
      for (s of ref) {
        results.push(s);
      }
      return results;
    })();
    state.t = 0;
    return document.getElementById("msg").innerHTML = state.steps[state.t].msg;
  };

  SVG.on(document, 'DOMContentLoaded', main);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript